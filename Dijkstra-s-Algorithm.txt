#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include<stdio.h>

using namespace std;
#define MAXIMUM 99
#define SIZE 5

void Dijkstra_s_Algorithm(int INPUTARRAY[SIZE][SIZE], int x, int VERTEX) {
  int weight[SIZE][SIZE]; // cost to go from vertex i to vertex j
  int length[SIZE];
  int temp[SIZE];
  int striked[SIZE]; // will be used to mark vertexs that have been already visited
  int minimum; //used for minimum distance
  int next;  // used to traverse vertexs
  int count; // used for while loops
  int i, j; // used for loops 

  
  for (i = 0; i < x; i++)
    for (j = 0; j < x; j++)
      if (INPUTARRAY[i][j] == 0)
        weight[i][j] = MAXIMUM;
      else
        weight[i][j] = INPUTARRAY[i][j];
  for (i = 0; i < x; i++) {
    length[i] = weight[VERTEX][i];
    temp[i] = VERTEX;
    striked[i] = 0;
  }
  length[VERTEX] = 0;
  striked[VERTEX] = 1;
  count = 1;
  while (count < x - 1) {
    minimum = MAXIMUM;
    for (i = 0; i < x; i++)
      if (length[i] < minimum && !striked[i]) {
        minimum = length[i];
        next = i;
      }
    striked[next] = 1;
    for (i = 0; i < x; i++)
      if (!striked[i])
        if (minimum + weight[next][i] < length[i]) {
          length[i] = minimum + weight[next][i];
          temp[i] = next;
        }
    count++;
  }
  for (i = 0; i < x; i++)
    if (i != VERTEX) {
      cout << "\nThe length of the vertex: " << i << " = " << length[i] << endl;
      cout << "The Path to the vertex: " << i;
      j = i;
      do {
        j = temp[j];
        cout << " <- " << j;
      } while (j != VERTEX);
    }
}



int main() {
  int x = 5;
  int y = 0;
  int INPUTARRAY[SIZE][SIZE] = {
    {
      0,0,0,0,0
    },
    {
      0,0,0,0,0
    },
    {
      0,0,0,0,0
    },
    {
      0,0,0,0,0
    },
    {
      0,0,0,0,0
    }
  };

  for (int i = 0; i < 5; i++) {
    for (int j = 0; j < 5; j++) {
      printf("Enter value for INPUTARRAY[%d][%d]:", i, j);
      scanf("%d", & INPUTARRAY[i][j]);
    }
  }

  Dijkstra_s_Algorithm(INPUTARRAY, x, y);
  return 0;
}


